- name: Install Need Package
  community.general.apk:
    update_cache: false
    name:
      - nginx
      - nginx-mod-stream
      - nginx-openrc
      - openssl
      - curl
    state: installed

- name: Start nginx
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: true

- name: Install acme.sh
  ansible.builtin.shell: |
    set -o pipefail
    curl -s https://get.acme.sh | sh -s email="{{ email }}"
  args:
    creates: /root/.acme.sh/account.conf
    executable: /bin/ash

- name: Add duckdns token
  ansible.builtin.lineinfile:
    path: /etc/profile
    regexp: "^export DuckDNS_Token="
    line: "export DuckDNS_Token={{ token }}"
    state: present

- name: Set default CA to Let's Encrypt
  ansible.builtin.command:
    cmd: /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt_test
  changed_when: true

- name: Check if certificate already exists
  ansible.builtin.stat:
    path: "/root/.acme.sh/{{ domain }}/{{ domain_filename }}.cer"
  register: cert_exists

- name: Get Challenge
  ansible.builtin.command:
    /root/.acme.sh/acme.sh --issue --dns dns_duckdns -d "{{ domain }}"
  environment:
    DuckDNS_Token: "{{ token }}"
  register: issue_cert_result
  changed_when: issue_cert_result.rc == 0
  failed_when:
    - issue_cert_result.rc != 0
    - "'Domains not changed' not in issue_cert_result.stdout"
  when: not cert_exists.stat.exists

- name: Get Challenge
  ansible.builtin.command:
    /root/.acme.sh/acme.sh --issue --dns dns_duckdns -d "{{ domain }}" -d "*.{{ domain }}" --dnssleep 180
  environment:
    DuckDNS_Token: "{{ token }}"
  register: issue_cert_result
  changed_when: issue_cert_result.rc == 0
  failed_when:
    - issue_cert_result.rc != 0
    - "'Domains not changed' not in issue_cert_result.stdout"
  when: not cert_exists.stat.exists

- name: Create nginx ssl directory
  ansible.builtin.file:
    path: /etc/nginx/ssl
    state: directory
    mode: '0755'

- name: Check if nginx certificates are installed
  ansible.builtin.stat:
    path: "/etc/nginx/ssl/{{ domain_filename }}.cer"
  register: nginx_cert_exists

- name: Install certificate for nginx
  ansible.builtin.command:
    /root/.acme.sh/acme.sh --install-cert -d "{{ domain }}" -d "*.{{ domain }}"
    --key-file /etc/nginx/ssl/{{ domain_filename }}.key
    --fullchain-file /etc/nginx/ssl/{{ domain_filename }}.cer
  register: install_cert_result
  changed_when: install_cert_result.rc == 0
  failed_when:
    - install_cert_result.rc != 0
    - "'No such domain' not in install_cert_result.stderr"
  when: not nginx_cert_exists.stat.exists or cert_exists.stat.exists

- name: Make Default file
  ansible.builtin.template:
    src: default.j2
    dest: /etc/nginx/http.d/default.conf
    mode: "755"

- name: Make internal file
  ansible.builtin.template:
    src: internal.j2
    dest: /etc/nginx/http.d/internal.conf
    mode: "755"

- name: Make https Header file
  ansible.builtin.template:
    src: httpsheader.j2
    dest: /etc/nginx/http.d/header.conf
    mode: "755"

- name: Make ssl Header file
  ansible.builtin.template:
    src: ssl.j2
    dest: /etc/nginx/http.d/ssl.conf
    mode: "755"

- name: Make https files
  ansible.builtin.template:
    src: https.j2
    dest: "/etc/nginx/http.d/{{ item.domain }}.conf"
    mode: "755"
  loop: "{{ services }}"

- name: Install pgterm
  ansible.builtin.get_url:
    url: https://github.com/YuruDeveloper/pgterm/releases/download/release/pgterm
    dest: "/usr/local/bin/pgterm"
    mode: "755"

- name: Make Config file
  ansible.builtin.template:
    src: pgtermConfig.j2
    dest: /etc/conf.d/pgterm
    mode: "755"

- name: Make System file
  ansible.builtin.template:
    src: pgterm.j2
    dest: /etc/init.d/pgterm
    mode: "755"

- name: Start pgterm
  ansible.builtin.service:
    name: pgterm
    state: started
    enabled: true

- name: Make internal file
  ansible.builtin.template:
    src: internal.j2
    dest: /etc/nginx/stream.d/internal.conf
    mode: "755"

- name: Make stream file
  ansible.builtin.template:
    src: stream.j2
    dest: "/etc/nginx/stream.d/postgres.{{ domain }}.conf"
    mode: "755"

- name: Reload nginx
  ansible.builtin.service:
    name: nginx
    state: reloaded
